<?xml version="1.0" ?>
<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <parameter key="chameleon_system_sanity_check.level.ok" type="constant">ChameleonSystem\SanityCheck\Outcome\CheckOutcome::OK</parameter>
        <parameter key="chameleon_system_sanity_check.level.notice" type="constant">ChameleonSystem\SanityCheck\Outcome\CheckOutcome::NOTICE</parameter>
        <parameter key="chameleon_system_sanity_check.level.warning" type="constant">ChameleonSystem\SanityCheck\Outcome\CheckOutcome::WARNING</parameter>
        <parameter key="chameleon_system_sanity_check.level.error" type="constant">ChameleonSystem\SanityCheck\Outcome\CheckOutcome::ERROR</parameter>
        <parameter key="chameleon_system_sanity_check.level.exception" type="constant">ChameleonSystem\SanityCheck\Outcome\CheckOutcome::EXCEPTION</parameter>
    </parameters>

    <services>
        <service id="chameleon_system_sanity_check.check_handler"
                 class="ChameleonSystem\SanityCheck\Handler\CheckHandler">
            <argument type="service" id="chameleon_system_sanity_check.check_resolver"/>
        </service>

        <service id="chameleon_system_sanity_check.check_resolver"
                 class="ChameleonSystem\SanityCheckBundle\Resolver\SymfonyContainerCheckResolver">
            <argument/> <!-- Will be replaced by AddSanityChecksPass -->
            <argument type="service" id="chameleon_system_sanity_check.check_data_holder"/>
        </service>

        <service id="chameleon_system_sanity_check.check_data_holder"
                 class="ChameleonSystem\SanityCheckBundle\Resolver\CheckDataHolder"/>

        <service id="chameleon_system_sanity_check.output_resolver"
                 class="ChameleonSystem\SanityCheck\Resolver\OutputResolver">
        </service>

        <service id="chameleon_system_sanity_check.abstract_check_suite"
                 class="ChameleonSystem\SanityCheck\Suite\CheckSuite" abstract="true">
            <argument type="service" id="chameleon_system_sanity_check.check_handler"/>
            <argument type="service" id="chameleon_system_sanity_check.output_resolver"/>
        </service>

        <!-- outputs start -->
        <service id="chameleon_system_sanity_check.check_output.default"
                 class="ChameleonSystem\SanityCheck\Output\DefaultCheckOutput">
            <argument type="service" id="chameleon_system_sanity_check.formatter.html"/>
            <argument>false</argument>
            <argument type="service" id="translator"/>
            <tag name="chameleon_system.sanity_check.output" alias="default"/>
        </service>

        <service id="chameleon_system_sanity_check.check_output.log" class="ChameleonSystem\SanityCheck\Output\LogCheckOutput">
            <argument type="service" id="chameleon_system_sanity_check.formatter.plain" />
            <argument>null</argument>
            <argument type="service" id="translator"/>
            <tag name="chameleon_system.sanity_check.output" alias="log"/>
        </service>

        <service id="chameleon_system_sanity_check.check_output.null"
                 class="ChameleonSystem\SanityCheck\Output\NullCheckOutput">
            <tag name="chameleon_system.sanity_check.output" alias="null"/>
        </service>

        <!-- outputs end -->

        <!-- formatters start -->
        <service id="chameleon_system_sanity_check.formatter.plain" class="ChameleonSystem\SanityCheck\Formatter\PlainOutputFormatter" />
        
        <service id="chameleon_system_sanity_check.formatter.console"
                 class="ChameleonSystem\SanityCheck\Formatter\ConsoleOutputFormatter"/>

        <service id="chameleon_system_sanity_check.formatter.html"
                 class="ChameleonSystem\SanityCheck\Formatter\HtmlOutputFormatter"/>
        <!-- formatters end -->

        <!-- commands start -->
        <service id="chameleon_system_sanity_check.command.perform_sanity_checks"
                 class="ChameleonSystem\SanityCheckBundle\Command\PerformSanityChecksCommand">
            <argument type="service" id="chameleon_system_sanity_check.check_handler"/>
            <argument type="service" id="chameleon_system_sanity_check.check_output.default"/>
            <argument type="service" id="chameleon_system_sanity_check.formatter.console"/>
            <tag name="console.command"/>
        </service>

        <service id="chameleon_system_sanity_check.command.perform_sanity_check_suite"
                 class="ChameleonSystem\SanityCheckBundle\Command\PerformSanityCheckSuiteCommand">
            <argument type="service" id="service_container"/>
            <argument type="service" id="chameleon_system_sanity_check.check_output.default"/>
            <argument type="service" id="chameleon_system_sanity_check.formatter.console"/>
            <tag name="console.command"/>
        </service>

        <service id="chameleon_system_sanity_check.command.sanity_check_info"
                 class="ChameleonSystem\SanityCheckBundle\Command\SanityCheckInfoCommand">
            <argument type="service" id="chameleon_system_sanity_check.check_data_holder"/>
            <tag name="console.command"/>
        </service>
        <!-- commands end -->

        <!-- abstract base checks start -->
        <service id="chameleon_system_sanity_check.check.disk_space"
                 class="ChameleonSystem\SanityCheck\Check\DiskSpaceCheck" abstract="true"/>
        <service id="chameleon_system_sanity_check.check.expression"
                 class="ChameleonSystem\SanityCheck\Check\ExpressionCheck" abstract="true"/>
        <service id="chameleon_system_sanity_check.check.file_exists"
                 class="ChameleonSystem\SanityCheck\Check\FileExistsCheck" abstract="true"/>
        <service id="chameleon_system_sanity_check.check.file_permission"
                 class="ChameleonSystem\SanityCheck\Check\FilePermissionCheck" abstract="true"/>
        <service id="chameleon_system_sanity_check.check.php_module_loaded"
                 class="ChameleonSystem\SanityCheck\Check\PhpModuleLoadedCheck" abstract="true"/>
        <service id="chameleon_system_sanity_check.check.php_runtime_version"
                 class="ChameleonSystem\SanityCheck\Check\PhpRuntimeVersionCheck" abstract="true"/>
        <!-- abstract base checks end -->

    </services>
</container>
